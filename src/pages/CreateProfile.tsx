import React, { useState } from "react";
import { FaPlus, FaTrash, FaUpload } from "react-icons/fa";
import { submitTutorProfile } from "../services/tutorProfileService";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";


const TutorProfileForm = () => {
  const [profileData, setProfileData] = useState({
    fullName: "",
    phone: "",
    email: "",
    introduction: "",
    location: "",
    teachingMethods: [] as string[],
    ageGroups: [] as string[],
    subjects: [""],
    courses: [{ name: "", details: "", duration: "", price: "" }],
    schedule: [{ day: "", time: "" }],
  });

  const [profileImage, setProfileImage] = useState<File | null>(null);
  const [introVideo, setIntroVideo] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    setter: React.Dispatch<React.SetStateAction<File | null>>
  ) => {
    if (e.target.files && e.target.files.length > 0) {
      setter(e.target.files[0]);
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Array Fields (‡∏ß‡∏¥‡∏ä‡∏≤, ‡∏Ñ‡∏≠‡∏£‡πå‡∏™, ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô)
  const addField = <T,>(field: keyof typeof profileData, item: T) => {
    setProfileData((prev) => ({
      ...prev,
      [field]: [...(prev[field] as T[]), item],
    }));
  };

  const removeField = (field: keyof typeof profileData, index: number) => {
    setProfileData((prev) => ({
      ...prev,
      [field]: (prev[field] as any[]).filter((_, i) => i !== index),
    }));
  };

 // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ API)
 const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const formData = new FormData();

    Object.entries(profileData).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        formData.append(key, JSON.stringify(value));
      } else {
        formData.append(key, value as string);
      }
    });

    if (profileImage) formData.append("profileImage", profileImage);
    if (introVideo) formData.append("introVideo", introVideo);

    const result = await submitTutorProfile(formData); // ‚úÖ ‡πÉ‡∏ä‡πâ API

    if (result.success) {
      toast.success(result.message, { position: "top-right" });
    } else {
      toast.error(result.message, { position: "top-right" });
    }

    setLoading(false);
  };

  return (
    <div className="max-w-4xl mx-auto p-8 bg-white shadow-lg rounded-lg">
      <h2 className="text-3xl font-bold text-center text-blue-800">
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      </h2>
      <p className="text-center text-gray-600 mb-6">
        ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
      </p>

      <form className="space-y-6" onSubmit={handleSubmit}>
        {/* ‚úÖ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
        <div>
          <label className="block font-semibold mb-1">‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå *</label>
          <input
            type="file"
            accept="image/*"
            onChange={(e) => handleFileChange(e, setProfileImage)}
            className="hidden"
            id="profile-upload"
          />
          <label htmlFor="profile-upload" className="btn-upload">
            <FaUpload /> ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
          </label>
          {profileImage && (
            <img
              src={URL.createObjectURL(profileImage)}
              className="mt-2 w-32 h-32 rounded-full object-cover"
            />
          )}
        </div>
        {profileImage && (
          <div className="mt-2 flex items-center space-x-3">
            <img
              src={URL.createObjectURL(profileImage)}
              className="w-32 h-32 rounded-full object-cover"
            />
            <button
              type="button"
              onClick={() => setProfileImage(null)}
              className="btn-danger"
            >
              ‡∏•‡∏ö‡∏£‡∏π‡∏õ
            </button>
          </div>
        )}

        {/* ‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß */}
        <div>
          <label className="block font-semibold mb-1">
            ‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) üé•
          </label>
          <input
            type="file"
            accept="video/*"
            onChange={(e) => handleFileChange(e, setIntroVideo)}
            className="hidden"
            id="video-upload"
          />
          <label htmlFor="video-upload" className="btn-upload">
            <FaUpload /> ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
          </label>
          {introVideo && (
            <video controls className="mt-2 w-64">
              <source src={URL.createObjectURL(introVideo)} type="video/mp4" />
            </video>
          )}
        </div>

        {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
        <input
          type="text"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *"
          className="input-field"
          required
        />
        <input
          type="text"
          placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *"
          className="input-field"
          required
        />
        <input
          type="email"
          placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ *"
          className="input-field"
          required
        />
        {/* ‚úÖ ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á */}
        <div>
          <label className="block font-semibold">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á *</label>
          <textarea
            className="input-field h-32 resize-none"
            placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå, ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô, ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
          ></textarea>
        </div>
        {/* ‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1) */}
        <div>
          <label className="block font-semibold">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô *</label>
          <div className="flex flex-wrap gap-3 mt-2">
            {[
              "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
              "‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß",
              "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°",
              "‡πÑ‡∏Æ‡∏ö‡∏£‡∏¥‡∏î (‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå + ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß)",
            ].map((method) => (
              <label key={method} className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  value={method}
                  className="form-checkbox text-blue-500"
                />
                <span>{method}</span>
              </label>
            ))}
          </div>
        </div>

        {/* ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô */}
        <div>
          <label className="block font-semibold">
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ *
          </label>
          <input
            type="text"
            className="input-field"
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø, ‡∏ï‡∏≤‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø‡∏•‡∏Ø"
          />
        </div>

        {/* ‚úÖ ‡∏ß‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1) */}
        <div>
          <label className="block font-semibold">‡∏ß‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô *</label>
          <div className="flex flex-wrap gap-3 mt-2">
            {[
              "‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πá‡∏Å",
              "‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
              "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
              "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
              "‡∏ß‡∏±‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô / ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà",
              "‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏¢",
            ].map((ageGroup) => (
              <label key={ageGroup} className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  value={ageGroup}
                  className="form-checkbox text-blue-500"
                />
                <span>{ageGroup}</span>
              </label>
            ))}
          </div>
        </div>

        {/* ‚úÖ ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô */}
        <div>
          <label className="block font-semibold">‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô *</label>
          {/* ‚úÖ ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô */}
          {profileData.subjects.map((subject, index) => (
            <div key={index}>
              <input
                type="text"
                value={subject}
                onChange={(e) => {
                  const updatedSubjects = [...profileData.subjects];
                  updatedSubjects[index] = e.target.value;
                  setProfileData({ ...profileData, subjects: updatedSubjects });
                }}
              />
              <button
                type="button"
                onClick={() => removeField("subjects", index)}
              >
                ‡∏•‡∏ö
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => addField("subjects", "")}
            className="btn-primary mt-2 flex items-center space-x-1 hover:bg-green-600"
          >
            <FaPlus /> <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤</span>
          </button>
        </div>

        {/* ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô */}
        <div>
          <label className="block font-semibold">‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô *</label>
          {profileData.courses.map((course, index) => (
            <div key={index} className="border p-4 rounded-md mt-2">
              <input
                type="text"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™"
                className="input-field mb-2"
                value={course.name}
                onChange={(e) => {
                  const updatedCourses = [...profileData.courses];
                  updatedCourses[index].name = e.target.value;
                  setProfileData({ ...profileData, courses: updatedCourses });
                }}
              />
              <input
                type="text"
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™"
                className="input-field mb-2"
                value={course.details}
                onChange={(e) => {
                  const updatedCourses = [...profileData.courses];
                  updatedCourses[index].details = e.target.value;
                  setProfileData({ ...profileData, courses: updatedCourses });
                }}
              />
              <input
                type="text"
                placeholder="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤"
                className="input-field mb-2"
                value={course.duration}
                onChange={(e) => {
                  const updatedCourses = [...profileData.courses];
                  updatedCourses[index].duration = e.target.value;
                  setProfileData({ ...profileData, courses: updatedCourses });
                }}
              />
              <input
                type="text"
                placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤"
                className="input-field mb-2"
                value={course.price}
                onChange={(e) => {
                  const updatedCourses = [...profileData.courses];
                  updatedCourses[index].price = e.target.value;
                  setProfileData({ ...profileData, courses: updatedCourses });
                }}
              />
              <button
                type="button"
                onClick={() => removeField("courses", index)}
                className="btn-danger flex items-center space-x-1 hover:bg-red-600"
              >
                <FaTrash /> <span>‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™</span>
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() =>
              addField("courses", {
                name: "",
                details: "",
                duration: "",
                price: "",
              })
            }
            className="btn-primary mt-2 flex items-center space-x-1 hover:bg-green-600"
          >
            <FaPlus /> <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™</span>
          </button>
        </div>

        {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô */}
        <div>
          <label className="block font-semibold">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô *</label>
          {profileData.schedule.map((slot, index) => (
            <div key={index} className="flex space-x-2 mt-2">
              <input
                type="text"
                placeholder="‡∏ß‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£)"
                className="input-field"
                value={slot.day}
                onChange={(e) => {
                  const updatedSchedule = [...profileData.schedule];
                  updatedSchedule[index].day = e.target.value;
                  setProfileData({ ...profileData, schedule: updatedSchedule });
                }}
              />
              <input
                type="text"
                placeholder="‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 10:00 - 12:00)"
                className="input-field"
                value={slot.time}
                onChange={(e) => {
                  const updatedSchedule = [...profileData.schedule];
                  updatedSchedule[index].time = e.target.value;
                  setProfileData({ ...profileData, schedule: updatedSchedule });
                }}
              />
              <button
                type="button"
                onClick={() => {
                  const updatedSchedule = profileData.schedule.filter(
                    (_, i) => i !== index
                  );
                  setProfileData({ ...profileData, schedule: updatedSchedule });
                }}
                className="btn-danger flex items-center space-x-1 hover:bg-red-600"
              >
                <FaTrash /> <span>‡∏•‡∏ö</span>
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => {
              setProfileData({
                ...profileData,
                schedule: [...profileData.schedule, { day: "", time: "" }],
              });
            }}
            className="btn-primary mt-2 flex items-center space-x-1 hover:bg-green-600"
          >
            <FaPlus />
            <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô</span>
          </button>
        </div>

        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        <button type="submit" className="btn-submit w-full" disabled={loading}>
          {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"}
        </button>

        <button
          type="button"
          onClick={() =>
            setProfileData({
              fullName: "",
              phone: "",
              email: "",
              introduction: "",
              location: "",
              teachingMethods: [],
              ageGroups: [],
              subjects: [""],
              courses: [{ name: "", details: "", duration: "", price: "" }],
              schedule: [{ day: "", time: "" }],
            })
          }
          className="btn-danger w-full"
        >
          ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        </button>
      </form>
    </div>
  );
};

export default TutorProfileForm;
