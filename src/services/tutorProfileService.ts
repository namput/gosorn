const API_BASE_URL =
  import.meta.env.VITE_REACT_APP_API_URL || "http://localhost:5000"; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API URL
  export interface TutorProfileResponse {
    success: boolean;
    data: {
      tutorId: number;
      subjects: string[];
      levels: string[];
      teachingMethods: string[];
      ageGroups: string[];
      courses: { name: string; details: string; duration: string; price: string }[];
      schedule: { day: string; time: string }[];
      id: number;
      userId: number;
      name: string;
      email: string;
      profileImage?: string;
      introVideo?: string;
      phone: string;
      location: string;
      subdomain: string;
      bio?: string;
      price: number;
      createdAt: string;
      updatedAt: string;
      User: {
        id: number;
        email: string;
        username: string;
      };
      templateId: number; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ó‡∏°‡πÅ‡∏û‡∏•‡∏ï‡πÅ‡∏£‡∏Å
    } | null;  // ‚úÖ ‡πÉ‡∏´‡πâ data ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `null`
  }
  
  export interface Template {
    id: number;
    templateName: string;
    templateUrl: string;
    createdAt?: string | null;
    updatedAt?: string | null;
  }
  
  export interface TemplateResponse {
    success: boolean;
    templates: Template[];
  }
  

  
  
  export const submitTutorProfile = async (formData: FormData): Promise<{ success: boolean; message: string }> => {
    const token = localStorage.getItem("token");
  
    if (!token) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏ô localStorage");
      return { success: false, message: "‚ùå Unauthorized: No Token" };
    }
  
    try {
      const response = await fetch(`${API_BASE_URL}/tutor/create-profile`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        credentials: "include",
        body: formData,
      });
  
      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        console.error("‚ùå API Error:", errorData || response.statusText);
        throw new Error(errorData?.message || "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå");
      }
  
      const result = await response.json();
      return { success: true, message: result.message || "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" };
    } catch (error) {
      console.error("‚ùå API Request Failed:", error);
      const err = error as Error;
      return { success: false, message: err.message || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ" };
    }
  };
  
  export const getTutorProfile = async (): Promise<TutorProfileResponse> => {
    try {
      const token = localStorage.getItem("token"); 
      if (!token) throw new Error("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
  
      const response = await fetch(`${API_BASE_URL}/tutor/profile`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`, 
          "Content-Type": "application/json",
        },
        credentials: "include",
      });
  
      if (!response.ok) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
      }
  
      return await response.json(); 
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", error);
      return { success: false, data: null } as TutorProfileResponse;
    }
  };


  export const getTemplates = async (): Promise<TemplateResponse> => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
  
      const response = await fetch(`${API_BASE_URL}/templates`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        credentials: "include",
      });
  
      if (!response.ok) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏°‡πÅ‡∏û‡∏•‡∏ï‡πÑ‡∏î‡πâ");
      }
  
      const json = await response.json();
      console.log("üîç Templates Loaded:", json);
      return json as TemplateResponse;
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡∏°‡πÅ‡∏û‡∏•‡∏ï:", error);
      return {
        success: false,
        templates: [],
      };
    }
  };
  